/**
 * Copyright 2025 QmDeve
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @author QmDeve
 * @github https://github.com/QmDeve
 * @since 2025-11-01
 */

uniform shader image;
uniform float contrast;
uniform float whitePoint;
uniform float chromaMultiplier;
const half3 rgbToY = half3(0.2126, 0.7152, 0.0722);

half4 saturateColor(half4 color, float amount) {
    half3 lin = toLinearSrgb(color.rgb);
    float y = dot(lin, rgbToY);
    half3 gray = half3(y);
    half3 sat = fromLinearSrgb(mix(gray, lin, amount));
    return half4(sat, color.a);
}

half4 main(float2 coord) {
    half4 color = image.eval(coord);
    color = saturateColor(color, chromaMultiplier);
    float3 target = (whitePoint > 0.0) ? float3(1.0) : float3(0.0);
    color.rgb = mix(color.rgb, target, abs(whitePoint));
    color.rgb = (color.rgb - 0.5) * (1.0 + contrast) + 0.5;
    return color;
}